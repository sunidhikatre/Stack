Use a stack to keep track of previous elements in a way that helps us find the nearest smaller element on the left.
For each element in the array:
Pop elements from the stack until the top is smaller than the current element.
If the stack is empty after popping, it means no smaller element exists to the left, so add -1 to the result.
Otherwise, the top of the stack is the nearest smaller element, so add it to the result.
Push the current element onto the stack for future elements.
Example
For the array [2, 1, 5, 3]:

2: No elements to the left, so add -1.
1: No smaller elements left after popping 2, so add -1.
5: The top of the stack (1) is smaller, so add 1.
3: Pop 5, and the next element (1) is smaller, so add 1.


class Complete {

    // Function for finding maximum and value pair
    public static int[] Smalleronleft(int arr[], int n) {
        // Complete the function
        Stack<Integer> st = new Stack<>();
        List<Integer> l = new ArrayList<>();
        
        for(int i=0; i< n; i++) {
            while(st.size() > 0 && st.peek() >= arr[i]) {
                st.pop();
            }
            
            if(st.isEmpty()) {
                l.add(-1);
            } else {
                l.add(st.peek());
            }
            st.push(arr[i]);
        }
        
        int[] result = new int[l.size()];
        for (int i = 0; i < l.size(); i++) {
            result[i] = l.get(i);
        }
        
        return result;
        
    }
}
